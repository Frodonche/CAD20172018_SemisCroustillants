Fonction rapide de la structure

On a un Modèle qui possède une instance de Game.
Il possède aussi une fonction setEpoque() qui défini l'époque de Game au lancement du programme.

Game instancie deux Joueur et une Epoque (par défaut dans le constructeur)
setEpoque() permet de définir l'époque de Game.

Joueur possède une grille et une liste de Bateau.
setFlotte() est appelé par setEpoque de Game pour instancier la liste de Bateau de Joueur.

(Strategy correspond aux differentes stratégies de jeu pour l'IA)

Le trio Epoque, EpoqueXXe et EpoqueXVIe constitue un desgin pattern de type Strategie.
setEpoque() de Game va permettre de sélectionner une stratégie entre EpoqueXXe et EpoqueXVIe.
Epoque est ensuite reliée à un design pattern de type Factory permettant de générer une liste de bateaux en fonction de l'Epoque sélectionnée par l'utilisateur.
Ainsi, EpoqueXXe va appeler UsineXXe, par exemple.

extraits de fonctions sur le framapad : https://bimestriel.framapad.org/p/conceptionCAD

FRAMAPAD CONEPTION CAD TAVU


public class Game {
    
    .
    .
    .

    public void setEpoque(int choix){

        
        Epoque epoque;
        
        switch(choix){
            
            case 20 :  epoque = new XXeme();
            case 16 : epoque = new XVIeme();
            
        }
        
        ArrayList<Bateau> flotte =  epoque.creerFlotte();
        joueur.setFlotte(flotte);
        .
        .
        .
        }
    .
    .
    .
    
    }
    
    public class EpoqueXXeme implements Epoque {
    .
    .
    .
    ArrayList<Bateau> creerFlotte(){
        ArrayList<Bateau> flotte = new ArrayList<Bateau>();
        Usine usineXXeme = new usineXXeme();
        flotte.add(usineXXeme.formerBateau(deux));
        flotte.add(usineXXeme.formerBateau(trois));
        flotte.add(usineXXeme.formerBateau(trois));
        flotte.add(usineXXeme.formerBateau(quatre));
        flotte.add(usineXXeme.formerBateau(cinq));
        return flotte;
        }
        .
        .
        .
    }
    
    public abstract class Usine{
        .
        .
        .
        public Bateau formerBateau(String type){
            return this.creerBateau(type);
        }
        
        public abstract creerBateau(String type){}
    }
    
    public class UsineXXeme extends Usine{

    .

    .

    .

    public Bateau creerBateau(String type){

    Bateau bateau = null;

    switch(type){

    case deux : bateau = new torpilleur();break;

    case trois : bateau = new ssmarin();break;

    case quatre : bateau = new croiseur();break;

    case cinq : bateau = new porteavion();break;

    }

    return bateau;

    }

    .

    .

    .

    }
